# Document-Driven Development (DDD) 방법론 v1.1

## 핵심 원칙 🎯

1. **코드가 아닌, 문서에서 시작한다**: 모든 기능 구현은 PRD에서 출발
2. **모든 결정은 기록으로 남긴다**: 모든 과정은 해당 역할의 문서에 기록
3. **각 문서는 명확한 역할이 있다**: 분리된 문서로 프로젝트 단계 관리

---

## 필수 문서 체크리스트 📂

AI는 다음 7가지 문서의 존재를 확인하고, 없으면 생성을 제안해야 합니다:

- [x] **docs/PRD.md** - 통합 요구사항 정의서 (프로젝트의 Single Source of Truth)
- [ ] **docs/DEVELOPMENT_PLAN.md** - 개발 계획서 (작업 우선순위와 일정)
- [x] **README.md** - 프로젝트 허브 (기술 스택, 설치/실행 방법)
- [ ] **docs/TEST_REPORT.md** - 테스트 보고서 (기능 테스트 체크리스트)
- [ ] **docs/DETAILED_TEST_REPORT.md** - 상세 테스트 보고서 (버그 및 이슈 상세 기록)
- [ ] **docs/FINAL_SUMMARY.md** - 완료 보고서 (버전별 완료 요약)
- [x] **docs/FUTURE_DEVELOPMENT_ROADMAP.md** - 향후 개발 로드맵 (다음 버전 기능 목록)

---

## 문서별 역할 및 책임

### 1. PRD.md (통합 요구사항 정의서)
**역할**: 종합 설계도 / 항해 지도
**포함 내용**:
- 프로젝트 비전 및 목표
- 모든 기능 명세 (User Stories, Use Cases)
- 데이터베이스 스키마 (ERD 포함)
- API 명세 (REST/GraphQL endpoints)
- UI/UX 설계 가이드
- 비즈니스 로직 상세 설명
- 비기능적 요구사항 (성능, 보안, 확장성)

**업데이트 시점**: 새로운 기능 기획 시, 기존 기능 수정 시

### 2. DEVELOPMENT_PLAN.md (개발 계획서)
**역할**: 작업 계획서 / 공정표
**포함 내용**:
- 현재 버전 목표
- 작업 항목 분해 (Task Breakdown)
- 작업 우선순위 (Priority)
- 예상 소요 시간
- 담당자 (Solo 프로젝트는 단계별 책임)
- 마일스톤 및 데드라인

**생성 시점**: 각 버전(MVP, v1.0 등) 개발 시작 전
**업데이트 빈도**: 주간 또는 작업 완료 시마다

### 3. README.md (프로젝트 허브)
**역할**: 프로젝트의 허브 / 선박 운용 매뉴얼
**포함 내용**:
- 프로젝트 개요 및 목적
- 기술 스택 (Frontend, Backend, Database, DevOps)
- 설치 및 실행 방법 (환경 변수 설정 포함)
- 프로젝트 구조 (폴더 구조 설명)
- 다른 문서로의 링크
- 기여 가이드라인 (협업 시)
- 라이선스 정보

**업데이트 시점**: 기술 스택 변경, 설치 방법 변경, 프로젝트 구조 변경 시

### 4. TEST_REPORT.md (테스트 보고서)
**역할**: 품질 검수 체크리스트
**포함 내용**:
- 테스트 대상 버전
- 기능별 테스트 항목 체크리스트
- 통합 테스트 결과
- 성능 테스트 결과
- Pass/Fail 상태

**생성 시점**: 개발 완료 후 테스트 시작 전
**업데이트 빈도**: 테스트 진행 중 실시간

### 5. DETAILED_TEST_REPORT.md (상세 테스트 보고서)
**역할**: 상세 품질 검수 보고서
**포함 내용**:
- 발견된 버그 상세 설명
- 재현 방법 (Steps to Reproduce)
- 예상 결과 vs 실제 결과
- 우선순위 (Critical, High, Medium, Low)
- 해결 방법 및 상태
- 개선 제안

**생성 시점**: 테스트 중 이슈 발견 시
**업데이트 빈도**: 버그 발견 및 해결 시마다

### 6. FINAL_SUMMARY.md (완료 보고서)
**역할**: 완공 보고서
**포함 내용**:
- 완료된 버전 정보
- 구현된 기능 목록
- 달성한 목표 vs 계획한 목표
- 주요 기술적 결정 사항
- 회고 (잘한 점, 개선할 점, 배운 점)
- 다음 버전 예고

**생성 시점**: 특정 버전(MVP, v1.0 등) 개발 완료 시
**업데이트 빈도**: 버전 릴리스마다 1회

### 7. FUTURE_DEVELOPMENT_ROADMAP.md (향후 개발 로드맵)
**역할**: 미래 증축/리모델링 계획서
**포함 내용**:
- 다음 버전 후보 기능 목록
- 기능별 우선순위 및 이유
- 기대 효과 (비즈니스 가치)
- 기술적 난이도 평가
- 예상 개발 기간

**생성 시점**: 프로젝트 초기 및 버전 완료 시
**업데이트 빈도**: 새로운 아이디어 발생 시, 버전 회고 시

---

## AI 행동 규칙 (AI Behavior Rules)

### 작업 시작 전 (Before Starting Any Task)

1. **문서 존재 확인**
   - 사용자가 새로운 기능 개발을 요청하면, 먼저 `docs/PRD.md`에 해당 기능이 정의되어 있는지 확인
   - 없다면: "이 기능은 PRD에 정의되지 않았습니다. 먼저 PRD에 기획을 추가하시겠습니까?"
   - 있다면: PRD의 해당 섹션을 참조하여 개발 진행

2. **개발 계획 확인**
   - 기능 개발 시작 전, `docs/DEVELOPMENT_PLAN.md`에 해당 작업이 계획되어 있는지 확인
   - 없다면: "DEVELOPMENT_PLAN.md에 이 작업을 추가하고 우선순위를 설정하시겠습니까?"

3. **문서 상태 체크**
   - 프로젝트 구조 변경, 새 라이브러리 추가 시 → `README.md` 업데이트 제안
   - API 변경, DB 스키마 변경 시 → `PRD.md` 업데이트 제안

### 개발 중 (During Development)

4. **코드 작성 전 문서 검증**
   - 구현하려는 기능이 PRD의 요구사항과 일치하는지 확인
   - 불일치 시: "PRD의 명세와 다릅니다. PRD를 수정할까요, 아니면 PRD에 맞춰 구현할까요?"

5. **변경사항 추적**
   - API endpoint 추가/변경 → PRD.md의 API 명세 업데이트
   - DB 테이블 추가/변경 → PRD.md의 스키마 업데이트
   - 환경 변수 추가 → README.md 업데이트
   - 패키지 추가/삭제 → README.md의 기술 스택 업데이트

6. **문서 우선 원칙**
   - 코드를 작성하기 전에, 관련 문서가 먼저 업데이트되어야 함
   - 예: API 구현 → PRD의 API 명세 확인/업데이트 → 코드 작성

### 개발 완료 후 (After Development)

7. **테스트 문서 생성 촉구**
   - 기능 구현 완료 시: "TEST_REPORT.md에 테스트 항목을 추가하시겠습니까?"
   - 테스트 항목 템플릿 자동 생성 제안

8. **문서 동기화 확인**
   - 모든 변경사항이 관련 문서에 반영되었는지 체크
   - 누락된 문서 업데이트 제안

9. **버전 완료 시**
   - `FINAL_SUMMARY.md` 생성 제안
   - 다음 버전 계획을 `FUTURE_DEVELOPMENT_ROADMAP.md`에서 검토 제안

---

## 6단계 워크플로우 (AI가 항상 따라야 함)

### Phase 1: 기획 (Planning)
**트리거**: 사용자가 새 기능 아이디어 제시
**AI 액션**:
1. "이 기능을 PRD.md에 추가하겠습니다" 안내
2. PRD.md에 다음 항목 작성:
   - 기능 개요 및 목적
   - User Story
   - 기능 명세 (상세)
   - 필요한 API endpoints
   - 필요한 DB 테이블/컬럼
   - UI/UX 고려사항
3. 작성 완료 후 사용자 검토 요청

### Phase 2: 계획 (Scheduling)
**트리거**: PRD에 새 기능 추가됨
**AI 액션**:
1. "DEVELOPMENT_PLAN.md에 작업 계획을 추가하겠습니다" 안내
2. DEVELOPMENT_PLAN.md에 작성:
   - 작업 항목 분해 (세부 Task로)
   - 각 Task의 우선순위
   - 예상 소요 시간
   - 의존성 (다른 Task와의 관계)
3. 사용자에게 계획 승인 요청

### Phase 3: 개발 (Development)
**트리거**: DEVELOPMENT_PLAN 승인됨
**AI 액션**:
1. PRD의 명세에 따라 코드 작성
2. 변경사항 발생 시:
   - DB 변경 → PRD.md 스키마 업데이트
   - API 추가 → PRD.md API 명세 업데이트
   - 패키지 추가 → README.md 기술 스택 업데이트
   - 설치 방법 변경 → README.md 업데이트
3. 각 업데이트 시 사용자에게 알림

### Phase 4: 테스트 (Testing)
**트리거**: 기능 개발 완료
**AI 액션**:
1. "TEST_REPORT.md에 테스트 항목을 생성하겠습니다" 제안
2. PRD를 기반으로 테스트 체크리스트 자동 생성
3. 테스트 진행 안내 및 결과 기록 촉구
4. 버그 발견 시: "DETAILED_TEST_REPORT.md에 이슈를 기록하시겠습니까?"

### Phase 5: 완료 및 회고 (Completion & Retrospective)
**트리거**: 모든 테스트 통과
**AI 액션**:
1. "FINAL_SUMMARY.md를 작성하시겠습니까?" 제안
2. 템플릿 제공:
   - 완료된 기능 목록
   - 목표 달성도
   - 주요 결정 사항
   - 회고 (잘한 점, 개선점, 배운 점)
3. Git tag 생성 제안 (v1.0.0 등)

### Phase 6: 반복 (Iteration)
**트리거**: 버전 완료
**AI 액션**:
1. "FUTURE_DEVELOPMENT_ROADMAP.md에서 다음 개발할 기능을 선택하시겠습니까?"
2. 로드맵 검토 및 우선순위 재평가 제안
3. 다음 기능 선택 시 → Phase 1로 돌아감

---

## 문서 템플릿 (AI가 자동 생성 시 사용)

### PRD.md 템플릿
```markdown
# PRD (Product Requirements Document)

## 1. 프로젝트 개요
- **프로젝트명**: 
- **버전**: 
- **작성일**: 
- **최종 수정일**: 

## 2. 프로젝트 비전 및 목표
### 비전
### 핵심 목표
### 성공 지표 (KPI)

## 3. 기능 명세
### 3.1 [기능명]
- **개요**: 
- **User Story**: 
- **상세 명세**: 
- **우선순위**: 
- **의존성**: 

## 4. 데이터베이스 스키마
### 4.1 [테이블명]
- **목적**: 
- **컬럼**: 
- **관계**: 

## 5. API 명세
### 5.1 [Endpoint명]
- **Method**: 
- **Path**: 
- **Request**: 
- **Response**: 
- **Error Handling**: 

## 6. UI/UX 설계
## 7. 비기능적 요구사항
## 8. 제약사항 및 전제조건
```

### DEVELOPMENT_PLAN.md 템플릿
```markdown
# 개발 계획서

## 버전 정보
- **대상 버전**: 
- **계획 작성일**: 
- **목표 완료일**: 

## 개발 목표
## 작업 항목

### Phase 1: [단계명]
| Task ID | 작업명 | 상세 설명 | 우선순위 | 예상 시간 | 상태 | 담당 | 비고 |
|---------|--------|-----------|----------|-----------|------|------|------|
| T-001   |        |           | High     | 4h        | TODO |      |      |

## 마일스톤
## 리스크 및 대응 방안
```

### TEST_REPORT.md 템플릿
```markdown
# 테스트 보고서

## 테스트 정보
- **대상 버전**: 
- **테스트 시작일**: 
- **테스트 완료일**: 
- **테스터**: 

## 테스트 항목

### [기능명]
| ID | 테스트 항목 | 예상 결과 | 실제 결과 | 상태 | 비고 |
|----|-------------|-----------|-----------|------|------|
| TC-001 |          |           |           | PASS |      |

## 테스트 통계
- **전체 항목**: 
- **통과**: 
- **실패**: 
- **통과율**: 

## 종합 의견
```

### DETAILED_TEST_REPORT.md 템플릿
```markdown
# 상세 테스트 보고서

## [Issue ID] - [Issue 제목]

**발견일**: 
**우선순위**: Critical / High / Medium / Low
**상태**: Open / In Progress / Resolved / Closed

### 설명
### 재현 방법
1. 
2. 
3. 

### 예상 결과
### 실제 결과
### 스크린샷/로그
### 해결 방법
### 해결일
```

### FINAL_SUMMARY.md 템플릿
```markdown
# 완료 보고서 - [버전명]

## 버전 정보
- **버전**: 
- **개발 기간**: 
- **완료일**: 

## 구현된 기능
### 주요 기능
1. 
2. 

### 부가 기능

## 목표 달성도
| 목표 | 계획 | 실제 | 달성률 |
|------|------|------|--------|
|      |      |      |        |

## 주요 기술적 결정 사항

## 회고
### 잘한 점
### 개선할 점
### 배운 점

## 다음 버전 예고
```

### FUTURE_DEVELOPMENT_ROADMAP.md 템플릿
```markdown
# 향후 개발 로드맵

## 다음 버전 후보 기능

### [기능명]
- **설명**: 
- **우선순위**: High / Medium / Low
- **비즈니스 가치**: 
- **기술적 난이도**: 
- **예상 개발 기간**: 
- **의존성**: 

## 장기 비전
## 기술 부채 관리
```

---

## AI의 핵심 책임 ⚡

1. **문서 누락 방지**: 작업 시작 전 항상 관련 문서 확인
2. **문서 동기화**: 코드 변경 시 관련 문서 자동 업데이트 제안
3. **워크플로우 준수**: 6단계 워크플로우를 벗어난 작업 요청 시 안내
4. **템플릿 제공**: 새 문서 생성 시 항상 적절한 템플릿 사용
5. **일관성 유지**: 모든 문서가 같은 형식과 수준으로 유지되도록 관리
6. **사용자 교육**: 사용자가 방법론을 이해하지 못할 경우 친절히 설명

---

## 금지 사항 🚫

1. ❌ 문서 없이 코드부터 작성하지 않기
2. ❌ PRD에 없는 기능을 임의로 구현하지 않기
3. ❌ 문서 업데이트를 나중으로 미루지 않기
4. ❌ 워크플로우 단계를 건너뛰지 않기
5. ❌ 사용자 승인 없이 PRD나 DEVELOPMENT_PLAN 수정하지 않기

---

## 예시 대화 흐름

### 시나리오 1: 새 기능 요청
**사용자**: "로그인 기능을 만들어줘"

**AI**:
```
📋 Document-Driven Development 체크

현재 상태:
- [ ] PRD.md에 로그인 기능 정의
- [ ] DEVELOPMENT_PLAN.md에 작업 계획

제안:
1. 먼저 docs/PRD.md에 로그인 기능 명세를 작성하겠습니다.
   - User Story
   - 기능 상세 명세
   - 필요한 API (POST /auth/login, etc.)
   - DB 스키마 (users 테이블)

2. 이후 DEVELOPMENT_PLAN.md에 작업 계획을 추가하겠습니다.

진행하시겠습니까?
```

### 시나리오 2: 코드 변경 요청
**사용자**: "users 테이블에 profile_image 컬럼 추가해줘"

**AI**:
```
📋 Document Update Required

이 변경은 다음 문서에 영향을 줍니다:
1. docs/PRD.md - 데이터베이스 스키마 섹션
2. docs/PRD.md - API 명세 (프로필 조회 응답 변경)

진행 순서:
1. PRD.md의 users 테이블 스키마 업데이트
2. 관련 API 명세 업데이트 (응답 필드 추가)
3. 마이그레이션 파일 생성
4. 코드 수정

모든 단계를 진행하시겠습니까?
```

### 시나리오 3: 개발 완료 후
**사용자**: "로그인 기능 완료했어"

**AI**:
```
🎉 기능 개발 완료! 다음 단계를 진행하시겠습니까?

Phase 4: 테스트
- [ ] TEST_REPORT.md에 로그인 테스트 항목 생성
  - 정상 로그인 케이스
  - 잘못된 비밀번호
  - 존재하지 않는 사용자
  - 토큰 발급 확인
  - 세션 관리

테스트 체크리스트를 생성하시겠습니까?
```

---

## 요약: AI가 항상 기억할 핵심 3원칙

1. **"문서 먼저, 코드는 나중에"** - 모든 구현은 PRD에서 시작
2. **"변경은 곧 기록"** - 모든 변경사항은 즉시 문서에 반영
3. **"워크플로우를 따르라"** - 6단계를 건너뛰지 말 것

---

이 규칙을 항상 준수하여, 사용자가 체계적이고 유지보수 가능한 프로젝트를 개발할 수 있도록 돕습니다.

