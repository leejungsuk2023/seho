// Prisma Schema - 세호 (SEHO) MVP v0.1
// PRD.md 4장 데이터베이스 스키마 구현

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 (users)
model User {
  id                String   @id @default(uuid())
  email             String   @unique
  passwordHash      String?  @map("password_hash")
  nickname          String   @unique
  profileImageUrl   String?  @map("profile_image_url")
  bio               String?
  provider          Provider @default(LOCAL)
  providerId        String?  @map("provider_id")
  isVerified        Boolean  @default(false) @map("is_verified")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  userTags          UserTag[]
  userInterests     UserInterest[]
  communityMemberships CommunityMembership[]
  createdCommunities Community[]       @relation("CommunityCreator")
  posts             Post[]            @relation("PostAuthor")
  comments          Comment[]
  likes             Like[]
  bookmarks         Bookmark[]
  eventBookmarks    EventBookmark[]
  createdEvents     Event[]           @relation("EventCreator")

  @@map("users")
}

enum Provider {
  LOCAL
  GOOGLE
  KAKAO
}

// 취향 태그 (tags)
model Tag {
  id         String    @id @default(uuid())
  name       String    @unique
  category   String
  usageCount Int       @default(0) @map("usage_count")
  createdAt  DateTime  @default(now()) @map("created_at")

  // Relations
  userTags     UserTag[]
  communityTags CommunityTag[]

  @@map("tags")
}

// 사용자 태그 (user_tags) - Many-to-Many
model UserTag {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
  @@map("user_tags")
}

// 관심 카테고리 (interests)
model Interest {
  id        String   @id @default(uuid())
  name      String   @unique
  icon      String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  userInterests UserInterest[]
  events        Event[]

  @@map("interests")
}

// 사용자 관심사 (user_interests) - Many-to-Many
model UserInterest {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  interestId String   @map("interest_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@unique([userId, interestId])
  @@map("user_interests")
}

// 커뮤니티 (communities)
model Community {
  id              String          @id @default(uuid())
  name            String
  description     String
  coverImageUrl   String?         @map("cover_image_url")
  creatorId       String          @map("creator_id")
  category        String
  type            CommunityType
  memberCount     Int             @default(1) @map("member_count")
  postCount       Int             @default(0) @map("post_count")
  isActive        Boolean         @default(true) @map("is_active")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  creator       User                  @relation("CommunityCreator", fields: [creatorId], references: [id])
  memberships   CommunityMembership[]
  posts         Post[]
  communityTags CommunityTag[]

  @@map("communities")
}

enum CommunityType {
  OPEN
  APPROVAL
}

// 커뮤니티 태그 (community_tags) - Many-to-Many
model CommunityTag {
  id          String   @id @default(uuid())
  communityId String   @map("community_id")
  tagId       String   @map("tag_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([communityId, tagId])
  @@map("community_tags")
}

// 커뮤니티 멤버십 (community_memberships)
model CommunityMembership {
  id          String           @id @default(uuid())
  userId      String           @map("user_id")
  communityId String           @map("community_id")
  role        MembershipRole
  status      MembershipStatus
  joinedAt    DateTime         @default(now()) @map("joined_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@map("community_memberships")
}

enum MembershipRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MembershipStatus {
  ACTIVE
  PENDING
  BANNED
}

// 게시글 (posts)
model Post {
  id          String    @id @default(uuid())
  communityId String    @map("community_id")
  authorId    String    @map("author_id")
  title       String
  content     String
  imageUrls   String[]  @map("image_urls")
  likeCount   Int       @default(0) @map("like_count")
  commentCount Int      @default(0) @map("comment_count")
  viewCount   Int       @default(0) @map("view_count")
  isPinned    Boolean   @default(false) @map("is_pinned")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  community Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  author    User       @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  bookmarks Bookmark[]

  @@map("posts")
}

// 댓글 (comments)
model Comment {
  id        String    @id @default(uuid())
  postId    String    @map("post_id")
  authorId  String    @map("author_id")
  content   String
  parentId  String?   @map("parent_id")
  likeCount Int       @default(0) @map("like_count")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

// 좋아요 (likes)
model Like {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  targetType TargetType @map("target_type")
  targetId   String     @map("target_id")
  createdAt  DateTime   @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Note: targetId는 polymorphic이므로 Prisma relation 없이 application level에서 처리

  @@unique([userId, targetType, targetId])
  @@index([targetId])
  @@map("likes")
}

enum TargetType {
  POST
  COMMENT
}

// 북마크 (bookmarks)
model Bookmark {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

// 이벤트 (events)
model Event {
  id            String    @id @default(uuid())
  title         String
  description   String
  interestId    String    @map("interest_id")
  location      String
  address       String
  latitude      Float?
  longitude     Float?
  startDate     DateTime  @map("start_date")
  endDate       DateTime  @map("end_date")
  imageUrls     String[]  @map("image_urls")
  linkUrl       String?   @map("link_url")
  price         String?
  organizer     String?
  creatorId     String    @map("creator_id")
  viewCount     Int       @default(0) @map("view_count")
  bookmarkCount Int       @default(0) @map("bookmark_count")
  status        EventStatus @default(PUBLISHED)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  interest  Interest        @relation(fields: [interestId], references: [id])
  creator   User            @relation("EventCreator", fields: [creatorId], references: [id])
  bookmarks EventBookmark[]

  @@map("events")
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ENDED
}

// 이벤트 북마크 (event_bookmarks)
model EventBookmark {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  eventId   String   @map("event_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_bookmarks")
}
